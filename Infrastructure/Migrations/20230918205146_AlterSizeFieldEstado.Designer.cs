// <auto-generated />
using System;
using Infrastructure.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230918205146_AlterSizeFieldEstado")]
    partial class AlterSizeFieldEstado
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("DBCadDev")
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.AuthEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Auth", "DBCadDev");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e5c47ea-bfa2-4040-a2d6-2096c6959973"),
                            Active = true,
                            CreatedBy = "1425f45f-fa52-4aa1-8a3e-b2b863e4df0b",
                            CreatedDate = new DateTime(2023, 9, 18, 17, 51, 43, 75, DateTimeKind.Local).AddTicks(4698),
                            Login = "llanfredi",
                            Nome = "Leandro Lanfredi",
                            Senha = "9N1RJ4v/JxP6S23Lg8STzA=="
                        });
                });

            modelBuilder.Entity("Domain.Entities.DevEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<Guid>("IdTipoDev")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoDev");

                    b.ToTable("Dev", "DBCadDev");
                });

            modelBuilder.Entity("Domain.Entities.TipoDevEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescTipoDev")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TipoDev", "DBCadDev");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e60ea66d-6336-4963-b69b-16731e635a96"),
                            Active = true,
                            CreatedBy = "dafb109b-e51d-4393-ae46-643afd394eed",
                            CreatedDate = new DateTime(2023, 9, 18, 17, 51, 43, 73, DateTimeKind.Local).AddTicks(502),
                            DescTipoDev = "Estágiário"
                        },
                        new
                        {
                            Id = new Guid("1d9e44ea-6bce-4bfa-9379-c5823df11b49"),
                            Active = true,
                            CreatedBy = "8e527ff5-f049-4716-8d90-a641be723e5f",
                            CreatedDate = new DateTime(2023, 9, 18, 17, 51, 43, 73, DateTimeKind.Local).AddTicks(562),
                            DescTipoDev = "Júnior"
                        },
                        new
                        {
                            Id = new Guid("dd804765-29d7-42bd-9c1e-fd60e7bc9379"),
                            Active = true,
                            CreatedBy = "4fb11f2c-e935-406e-b5a9-a7b828aad692",
                            CreatedDate = new DateTime(2023, 9, 18, 17, 51, 43, 73, DateTimeKind.Local).AddTicks(591),
                            DescTipoDev = "Pleno"
                        },
                        new
                        {
                            Id = new Guid("89953768-e9ed-4950-b625-2e940d6ba875"),
                            Active = true,
                            CreatedBy = "c281ded7-0d31-439f-a5c6-0811a5f02d8d",
                            CreatedDate = new DateTime(2023, 9, 18, 17, 51, 43, 73, DateTimeKind.Local).AddTicks(603),
                            DescTipoDev = "Sênior"
                        },
                        new
                        {
                            Id = new Guid("c64bb26c-1599-4207-8a00-baa5895046a4"),
                            Active = true,
                            CreatedBy = "17b19284-8a71-495c-8689-be15493f0f9a",
                            CreatedDate = new DateTime(2023, 9, 18, 17, 51, 43, 73, DateTimeKind.Local).AddTicks(613),
                            DescTipoDev = "Especialista"
                        });
                });

            modelBuilder.Entity("Domain.Entities.DevEntity", b =>
                {
                    b.HasOne("Domain.Entities.TipoDevEntity", "TipoDev")
                        .WithMany()
                        .HasForeignKey("IdTipoDev")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoDev");
                });
#pragma warning restore 612, 618
        }
    }
}
