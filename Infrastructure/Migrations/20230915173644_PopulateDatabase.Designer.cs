// <auto-generated />
using System;
using Infrastructure.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230915173644_PopulateDatabase")]
    partial class PopulateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("DBCadDev")
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.AuthEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Auth", "DBCadDev");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4de9379-7d63-4ab9-bd95-0017f5750a98"),
                            Active = true,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2023, 9, 15, 14, 36, 43, 706, DateTimeKind.Local).AddTicks(5862),
                            Login = "llanfredi",
                            Nome = "Leandro Lanfredi",
                            Senha = "123456"
                        });
                });

            modelBuilder.Entity("Domain.Entities.DevEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdTipoDev")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Dev", "DBCadDev");
                });

            modelBuilder.Entity("Domain.Entities.TipoDevEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescTipoDev")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TipoDev", "DBCadDev");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b27e03ab-4266-4351-bceb-17fd81ba6bd0"),
                            Active = true,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2023, 9, 15, 14, 36, 43, 705, DateTimeKind.Local).AddTicks(2430),
                            DescTipoDev = "Estágiário"
                        },
                        new
                        {
                            Id = new Guid("9ec0f7b4-9b72-4a81-b55a-c209389dc97e"),
                            Active = true,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2023, 9, 15, 14, 36, 43, 705, DateTimeKind.Local).AddTicks(2478),
                            DescTipoDev = "Estágiário"
                        },
                        new
                        {
                            Id = new Guid("f185f4b4-61c2-4978-82cf-3beb35f73151"),
                            Active = true,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2023, 9, 15, 14, 36, 43, 705, DateTimeKind.Local).AddTicks(2485),
                            DescTipoDev = "Júnior"
                        },
                        new
                        {
                            Id = new Guid("048d114c-4671-4742-922a-eb3aafe8fe30"),
                            Active = true,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2023, 9, 15, 14, 36, 43, 705, DateTimeKind.Local).AddTicks(2553),
                            DescTipoDev = "Pleno"
                        },
                        new
                        {
                            Id = new Guid("2d7a5fc9-bb02-4369-b012-2983281361ca"),
                            Active = true,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2023, 9, 15, 14, 36, 43, 705, DateTimeKind.Local).AddTicks(2559),
                            DescTipoDev = "Sênior"
                        },
                        new
                        {
                            Id = new Guid("254c5c47-7af2-4797-a27a-1a36d593d8cb"),
                            Active = true,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2023, 9, 15, 14, 36, 43, 705, DateTimeKind.Local).AddTicks(2567),
                            DescTipoDev = "Especialista"
                        });
                });

            modelBuilder.Entity("Domain.Entities.DevEntity", b =>
                {
                    b.HasOne("Domain.Entities.TipoDevEntity", "TipoDev")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.DevEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoDev");
                });
#pragma warning restore 612, 618
        }
    }
}
